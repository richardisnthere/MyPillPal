@page "/manage"
@inject NavigationManager Navigation
@using PillData.Models
@using PillPalApp.Services
@inject IMedicationService MedicationService
@inject IReminderService ReminderService

<ScrollView>
    <div class="container">
        <button class="back-button" @onclick="GoBack">← Back to Home</button>

        <h2>Manage Medication</h2>

        @if (isLoading)
        {
            <p>Loading medications...</p>
        }
        else if (medications == null || medications.Count == 0)
        {
            <p>You don't have any medications.</p>
        }
        else
        {
            <div style="width: 100%; max-width: 400px;">
                @foreach (var med in medications)
                {
                    <div class="reminder-card" style="flex-direction: column;">
                        <button class="dropdown-header" @onclick="() => ToggleDropdown(med.ID)">
                            <div style="display: flex; justify-content: space-between; align-items: center; width: 100%;">
                                <span>@med.name</span>
                                <span>@(expandedMedID == med.ID ? "▲" : "▼")</span>
                            </div>
                        </button>

                        @if (expandedMedID == med.ID)
                        {
                            <div style="margin-top: 10px; width: 100%;">
                                <p><strong>Dose:</strong> @med.dose mg</p>
                                <p><strong>Form:</strong> @med.form</p>
                                <p><strong>Original Size:</strong> @med.originalSize</p>
                                <p><strong>Current Size:</strong> @med.currentSize</p>
                                <p><strong>Notes:</strong> @med.addInfo</p>

                                <div class="button-row" style="margin-top: 12px;">
                                    <button class="cancel-button" @onclick="() => StopTaking(med.ID)">Stop Taking</button>
                                    <button class="update-button" @onclick="() => GoToEditMedication(med.ID)">Edit</button>
                                    <button class="cancel-button" @onclick="() => DeleteMedication(med.ID)">Delete</button>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        }
    </div>
</ScrollView>

@code {
    [Parameter] public string username { get; set; }
    [Parameter] public int userID { get; set; }

    private List<MedicationModel> medications = new();
    private int? expandedMedID = null;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var queryParams = Navigation.Uri.Split('?').Skip(1).FirstOrDefault()?.Split('&');
            if (queryParams != null)
            {
                foreach (var param in queryParams)
                {
                    var keyValue = param.Split('=');
                    if (keyValue[0] == "username") username = keyValue[1];
                    else if (keyValue[0] == "userID") userID = int.Parse(keyValue[1]);
                }
            }

            medications = await MedicationService.ReadMedByUserID(userID) ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading medications: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleDropdown(int medID)
    {
        expandedMedID = (expandedMedID == medID) ? null : medID;
    }

    private async Task StopTaking(int medID)
    {
        try
        {
            var reminders = await ReminderService.ReadRemByMedID(medID);
            if (reminders != null && reminders.Count > 0)
            {
                foreach (var rem in reminders)
                {
                    await ReminderService.DeleteReminder(rem.ID);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error while stopping medication: {ex.Message}");
        }
    }

    private async Task DeleteMedication(int medID)
    {
        try
        {
            await StopTaking(medID);
            await MedicationService.DeleteMedication(medID);
            medications = await MedicationService.ReadMedByUserID(userID) ?? new();
            expandedMedID = null;
            StateHasChanged(); // Forces UI to refresh
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting medication: {ex.Message}");
        }
    }

    private void GoToEditMedication(int medID)
    {
        Navigation.NavigateTo($"/edit-medication?medID={medID}&username={username}&userID={userID}");
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/home?username={username}&userID={userID}");
    }
}
