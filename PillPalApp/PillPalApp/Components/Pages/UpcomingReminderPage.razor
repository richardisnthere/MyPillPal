@page "/upcoming-medication"
@inject NavigationManager Navigation
@using PillPalApp.Services
@inject IMedicationService MedicationService
@inject IReminderService ReminderService

<ScrollView>
    <div class="upcoming-container">

        <!-- Back Button -->
        <button class="back-button" @onclick="GoBack">⬅ Back</button>

        <h2 class="title">Upcoming Schedule</h2>

        @if (groupedReminders != null && groupedReminders.Any())
        {
            @foreach (var group in groupedReminders)
            {
                <div class="day-group">
                    <h3 class="day-header">@group.Key</h3>

                    @foreach (var item in group.Value)
                    {
                        <div class="reminder-card">
                            <div class="reminder-left">
                                <p class="reminder-time">@item.Time.ToString(@"hh\:mm")</p>
                                <p class="reminder-med">@item.MedicationName</p>
                                <p class="reminder-dose">Dose: @item.Dose mg</p>
                            </div>
                        </div>
                    }
                </div>
            }
        }
        else
        {
            <p class="no-reminders">No upcoming reminders.</p>
        }

    </div>
</ScrollView>

@code {
    private string username;
    private int userID;

    private Dictionary<string, List<UpcomingReminderDisplay>> groupedReminders = new();

    protected override async Task OnInitializedAsync()
    {
        var queryParams = Navigation.Uri.Split('?')[1].Split('&');
        foreach (var param in queryParams)
        {
            var keyValue = param.Split('=');
            if (keyValue[0] == "username")
                username = keyValue[1];
            else if (keyValue[0] == "userID")
                userID = int.Parse(keyValue[1]);
        }

        await LoadUpcomingReminders();
    }

    private async Task LoadUpcomingReminders()
    {
        try
        {
            var meds = await MedicationService.ReadMedByUserID(userID);
            var upcomingList = new List<UpcomingReminderDisplay>();

            foreach (var med in meds)
            {
                var weekReminders = await ReminderService.ReadRemByWeek(med.ID);
                foreach (var rem in weekReminders)
                {
                    if (rem.frequency.Date > DateTime.Today)
                    {
                        upcomingList.Add(new UpcomingReminderDisplay
                        {
                            DayName = rem.frequency.ToString("dddd"),
                            Time = rem.time,
                            MedicationName = med.name,
                            Dose = med.dose
                        });
                    }
                }
            }

            groupedReminders = upcomingList
                .GroupBy(r => r.DayName)
                .OrderBy(g => GetDayIndex(g.Key))
                .ToDictionary(g => g.Key, g => g.OrderBy(r => r.Time).ToList());
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading upcoming reminders: {ex.Message}");
            groupedReminders = new();
        }
    }

    private int GetDayIndex(string dayName)
    {
        return dayName switch
        {
            "Sunday" => 0,
            "Monday" => 1,
            "Tuesday" => 2,
            "Wednesday" => 3,
            "Thursday" => 4,
            "Friday" => 5,
            "Saturday" => 6,
            _ => 7
        };
    }

    private class UpcomingReminderDisplay
    {
        public string DayName { get; set; }
        public TimeSpan Time { get; set; }
        public string MedicationName { get; set; }
        public float Dose { get; set; }
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/home?username={username}&userID={userID}");
    }
}
